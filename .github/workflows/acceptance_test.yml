# this is a generated file, DO NOT EDIT
# to generate this file run make pre-commit
# this is a generated file, DO NOT EDIT
# to generate this file run make pre-commit

name: Acceptance Tests
on:
  schedule:
    - cron: '30 19 * * *'
  workflow_dispatch:

env:
  ACC_TEST_CI: 1

jobs:
  createproject:
    name: Create Project
    runs-on: ubuntu-latest
    outputs:
      projectID: ${{ steps.create_project.outputs.ACC_TEST_PROJECT_ID }}
    steps:
      - name: Create test project
        id: create_project
        shell: bash
        run: |
          # JSON_DATA=$(cat << EOF
          # { 
          # "name": "${{ github.event.repository.name }}_${{ github.run_id }}", 
          # "containerParentId": "${{ secrets.ACC_TEST_PARENT_CONTAINER_ID }}", 
          # "members": [{ 
          # "role": "project.owner", 
          # "subject": "${{ secrets.ACC_TEST_USER_EMAIL }}" 
          # },{ 
          # "role": "project.owner", 
          # "subject": "${{ secrets.STACKIT_SERVICE_ACCOUNT_EMAIL }}" 
          # }], 
          # "labels": { 
          # "billingReference": "${{ secrets.ACC_TEST_BILLING_REF }}", 
          # "scope": "PUBLIC" 
          # }
          # }
          # EOF
          # )
          
          # curl --location --request POST 'https://api.stackit.cloud/resource-management/v2/projects' \
          #   --header 'Content-Type: application/json' \
          #   --header 'Accept: application/json' \
          #   --header 'Authorization: Bearer ${{ secrets.STACKIT_SERVICE_ACCOUNT_TOKEN }}' \
          #   --data-raw "${JSON_DATA}" > $HOME/pr.json
          
          # ACC_TEST_PROJECT_ID="$(jq -r '.projectId' $HOME/pr.json)"
          ACC_TEST_PROJECT_ID="a4d42390-a3fb-40a5-bbab-ecc3988f8091"
          echo "ACC_TEST_PROJECT_ID=${ACC_TEST_PROJECT_ID}" >> $GITHUB_ENV
          echo "ACC_TEST_PROJECT_ID=${ACC_TEST_PROJECT_ID}" >> $GITHUB_OUTPUT
          [[ -z "${ACC_TEST_PROJECT_ID}" || "${ACC_TEST_PROJECT_ID}" == "NULL" || "${ACC_TEST_PROJECT_ID}" == "null" ]] && exit 1 || exit 0

      - name: Wait project created
        id: wait_project_active
        uses: mydea/action-wait-for-api@v1
        with:
          url: 'https://api.stackit.cloud/resource-management/v2/projects/${{ env.ACC_TEST_PROJECT_ID }}'
          headers: '{
              "Accept": "application/json",
              "Authorization": "Bearer ${{ secrets.STACKIT_SERVICE_ACCOUNT_TOKEN }}"
            }'
          expected-response-field: 'lifecycleState'
          expected-response-field-value: 'ACTIVE'



	ds00:
    needs: [createproject]
    name: argus instance
    id: dsargus-instance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test argus instance Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/argus/instance

	ds01:
    needs: [createproject,dsargus-instance]
    name: argus job
    id: dsargus-job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test argus job Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/argus/job

	ds12:
    needs: [createproject]
    name: data-services credential
    id: dsdata-services-credential
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test data-services credential Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/data-services/credential

	ds13:
    needs: [createproject,dsdata-services-credential]
    name: data-services instance
    id: dsdata-services-instance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test data-services instance Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/data-services/instance

	ds24:
    needs: [createproject]
    name: kubernetes cluster
    id: dskubernetes-cluster
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test kubernetes cluster Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/kubernetes/cluster

	ds25:
    needs: [createproject,dskubernetes-cluster]
    name: kubernetes project
    id: dskubernetes-project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test kubernetes project Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/kubernetes/project

	ds36:
    needs: [createproject]
    name: mongodb-flex instance
    id: dsmongodb-flex-instance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test mongodb-flex instance Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/mongodb-flex/instance

	ds47:
    needs: [createproject]
    name: object-storage bucket
    id: dsobject-storage-bucket
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test object-storage bucket Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/object-storage/bucket

	ds48:
    needs: [createproject,dsobject-storage-bucket]
    name: object-storage credential
    id: dsobject-storage-credential
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test object-storage credential Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/object-storage/credential

	ds49:
    needs: [createproject,dsobject-storage-bucket,dsobject-storage-credential]
    name: object-storage credentials-group
    id: dsobject-storage-credentials-group
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test object-storage credentials-group Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/object-storage/credentials-group

	ds410:
    needs: [createproject,dsobject-storage-bucket,dsobject-storage-credential,dsobject-storage-credentials-group]
    name: object-storage project
    id: dsobject-storage-project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test object-storage project Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/object-storage/project

	ds511:
    needs: [createproject]
    name: postgres-flex instance
    id: dspostgres-flex-instance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test postgres-flex instance Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/postgres-flex/instance

	ds612:
    needs: [createproject]
    name: project
    id: dsproject
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Prepare environment
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      - name: Test project Data Source
        shell: bash
        run: |
          make dummy PATH=stackit/internal/data-sources/project

      # - name: Test
      #   id: acceptance-test
      #   run: make testacc ACC_TEST_BILLING_REF="${{ secrets.ACC_TEST_BILLING_REF }}" ACC_TEST_USER_EMAIL="${{ secrets.ACC_TEST_USER_EMAIL }}" STACKIT_SERVICE_ACCOUNT_TOKEN="${{ secrets.STACKIT_SERVICE_ACCOUNT_TOKEN }}" STACKIT_SERVICE_ACCOUNT_EMAIL="${{ secrets.STACKIT_SERVICE_ACCOUNT_EMAIL }}"

  deleteproject:
    name: Delete Project
    runs-on: ubuntu-latest
    needs: [createproject,datasourcestest]
    if: ${{ always() }}
    steps:
      - name: Prepare deletion
        id: prep_deletion
        if: always()
        shell: bash
        run: |
          echo "ACC_TEST_PROJECT_ID=${{needs.createproject.outputs.projectID}}" >> $GITHUB_ENV
      # - name: Delete test project
      #   id: delete_project
      #   if: always()
      #   shell: bash
      #   run:   |
      #     [[ -z "${ACC_TEST_PROJECT_ID}" || "${ACC_TEST_PROJECT_ID}" == "NULL" || "${ACC_TEST_PROJECT_ID}" == "null" ]] && exit 0
      #     echo "Deleting project ID: ${ACC_TEST_PROJECT_ID}"
      #     curl --location --request DELETE 'https://api.stackit.cloud/resource-management/v2/projects/${{ env.ACC_TEST_PROJECT_ID }}' \
      #       --header 'Accept: application/json' \
      #       --header 'Authorization: Bearer ${{ secrets.STACKIT_SERVICE_ACCOUNT_TOKEN }}'
